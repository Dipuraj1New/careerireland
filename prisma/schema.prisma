// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model
model User {
  id            String    @id @default(uuid()) @db.Uuid
  email         String    @unique
  passwordHash  String    @map("password_hash")
  firstName     String    @map("first_name")
  lastName      String    @map("last_name")
  role          UserRole
  dateOfBirth   DateTime? @map("date_of_birth") @db.Date
  nationality   String?
  createdAt     DateTime  @default(now()) @map("created_at") @db.Timestamptz
  updatedAt     DateTime  @default(now()) @map("updated_at") @db.Timestamptz

  // Relations
  cases                Case[]                @relation("ApplicantCases")
  assignedCases        Case[]                @relation("AgentCases")
  documents            Document[]
  notifications        Notification[]
  conversations        ConversationParticipant[]
  messages             Message[]
  consultationsAsExpert Consultation[]       @relation("ExpertConsultations")
  consultationsAsApplicant Consultation[]    @relation("ApplicantConsultations")
  formTemplates        FormTemplate[]
  formSubmissions      FormSubmission[]
  formSignatures       FormSignature[]
  securityAlerts       SecurityAlert[]
  dataSubjectRequests  DataSubjectRequest[]
  permissionGroups     UserPermissionGroup[]
  accessReviews        AccessReview[]

  @@index([email])
  @@index([role])
  @@map("users")
}

enum UserRole {
  APPLICANT
  AGENT
  EXPERT
  ADMIN
}

// Case model
model Case {
  id            String       @id @default(uuid()) @db.Uuid
  applicantId   String       @map("applicant_id") @db.Uuid
  agentId       String?      @map("agent_id") @db.Uuid
  title         String
  description   String?
  visaType      VisaType     @map("visa_type")
  status        CaseStatus   @default(DRAFT)
  priority      CasePriority @default(MEDIUM)
  createdAt     DateTime     @default(now()) @map("created_at") @db.Timestamptz
  updatedAt     DateTime     @default(now()) @map("updated_at") @db.Timestamptz
  submittedAt   DateTime?    @map("submitted_at") @db.Timestamptz
  completedAt   DateTime?    @map("completed_at") @db.Timestamptz

  // Relations
  applicant     User         @relation("ApplicantCases", fields: [applicantId], references: [id])
  agent         User?        @relation("AgentCases", fields: [agentId], references: [id])
  documents     Document[]
  consultations Consultation[]
  formSubmissions FormSubmission[]

  @@index([applicantId])
  @@index([agentId])
  @@index([status])
  @@map("cases")
}

enum VisaType {
  WORK
  STUDY
  FAMILY
  BUSINESS
  TOURIST
  CITIZENSHIP
}

enum CaseStatus {
  DRAFT
  SUBMITTED
  UNDER_REVIEW
  ADDITIONAL_DOCUMENTS_REQUIRED
  PENDING_GOVERNMENT_SUBMISSION
  SUBMITTED_TO_GOVERNMENT
  APPROVED
  REJECTED
  COMPLETED
  CANCELLED
}

enum CasePriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

// Document model
model Document {
  id            String          @id @default(uuid()) @db.Uuid
  caseId        String          @map("case_id") @db.Uuid
  type          DocumentType
  filePath      String          @map("file_path")
  fileName      String          @map("file_name")
  fileSize      Int             @map("file_size")
  mimeType      String          @map("mime_type")
  status        DocumentStatus  @default(PENDING)
  uploadedBy    String          @map("uploaded_by") @db.Uuid
  validUntil    DateTime?       @map("valid_until") @db.Timestamptz
  createdAt     DateTime        @default(now()) @map("created_at") @db.Timestamptz
  updatedAt     DateTime        @default(now()) @map("updated_at") @db.Timestamptz

  // Relations
  case          Case            @relation(fields: [caseId], references: [id])
  user          User            @relation(fields: [uploadedBy], references: [id])

  @@index([caseId])
  @@index([type])
  @@index([status])
  @@map("documents")
}

enum DocumentType {
  PASSPORT
  VISA
  BIRTH_CERTIFICATE
  MARRIAGE_CERTIFICATE
  EDUCATION_CERTIFICATE
  EMPLOYMENT_LETTER
  BANK_STATEMENT
  UTILITY_BILL
  PHOTO
  OTHER
}

enum DocumentStatus {
  PENDING
  APPROVED
  REJECTED
  EXPIRED
}

// Notification model
model Notification {
  id            String            @id @default(uuid()) @db.Uuid
  userId        String            @map("user_id") @db.Uuid
  type          NotificationType
  title         String
  message       String
  isRead        Boolean           @default(false) @map("is_read")
  metadata      Json?
  createdAt     DateTime          @default(now()) @map("created_at") @db.Timestamptz

  // Relations
  user          User              @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([isRead])
  @@map("notifications")
}

enum NotificationType {
  CASE_STATUS_CHANGE
  DOCUMENT_UPLOAD
  DOCUMENT_STATUS_CHANGE
  MESSAGE_RECEIVED
  CONSULTATION_SCHEDULED
  CONSULTATION_REMINDER
  FORM_SUBMISSION
  SYSTEM_ALERT
}

// Messaging models
model Conversation {
  id            String                @id @default(uuid()) @db.Uuid
  type          ConversationType      @default(DIRECT)
  title         String?
  createdAt     DateTime              @default(now()) @map("created_at") @db.Timestamptz
  updatedAt     DateTime              @default(now()) @map("updated_at") @db.Timestamptz

  // Relations
  participants  ConversationParticipant[]
  messages      Message[]

  @@map("conversations")
}

model ConversationParticipant {
  conversationId String    @map("conversation_id") @db.Uuid
  userId        String    @map("user_id") @db.Uuid
  joinedAt      DateTime  @default(now()) @map("joined_at") @db.Timestamptz
  leftAt        DateTime? @map("left_at") @db.Timestamptz

  // Relations
  conversation  Conversation @relation(fields: [conversationId], references: [id])
  user          User         @relation(fields: [userId], references: [id])

  @@id([conversationId, userId])
  @@map("conversation_participants")
}

model Message {
  id            String        @id @default(uuid()) @db.Uuid
  conversationId String        @map("conversation_id") @db.Uuid
  senderId      String        @map("sender_id") @db.Uuid
  content       String
  status        MessageStatus @default(SENT)
  parentId      String?       @map("parent_id") @db.Uuid
  metadata      Json?
  createdAt     DateTime      @default(now()) @map("created_at") @db.Timestamptz
  updatedAt     DateTime      @default(now()) @map("updated_at") @db.Timestamptz

  // Relations
  conversation  Conversation  @relation(fields: [conversationId], references: [id])
  sender        User          @relation(fields: [senderId], references: [id])
  parent        Message?      @relation("MessageReplies", fields: [parentId], references: [id])
  replies       Message[]     @relation("MessageReplies")

  @@index([conversationId])
  @@index([senderId])
  @@map("messages")
}

enum ConversationType {
  DIRECT
  GROUP
  CASE
  SYSTEM
}

enum MessageStatus {
  SENT
  DELIVERED
  READ
  FAILED
}

// Consultation models
model Consultation {
  id            String              @id @default(uuid()) @db.Uuid
  expertId      String              @map("expert_id") @db.Uuid
  applicantId   String              @map("applicant_id") @db.Uuid
  caseId        String?             @map("case_id") @db.Uuid
  scheduledAt   DateTime            @map("scheduled_at") @db.Timestamptz
  duration      Int                 // in minutes
  status        ConsultationStatus  @default(SCHEDULED)
  recordingUrl  String?             @map("recording_url")
  transcriptUrl String?             @map("transcript_url")
  notes         String?
  createdAt     DateTime            @default(now()) @map("created_at") @db.Timestamptz
  updatedAt     DateTime            @default(now()) @map("updated_at") @db.Timestamptz

  // Relations
  expert        User                @relation("ExpertConsultations", fields: [expertId], references: [id])
  applicant     User                @relation("ApplicantConsultations", fields: [applicantId], references: [id])
  case          Case?               @relation(fields: [caseId], references: [id])

  @@index([expertId])
  @@index([applicantId])
  @@index([caseId])
  @@map("consultations")
}

enum ConsultationStatus {
  SCHEDULED
  COMPLETED
  CANCELLED
  NO_SHOW
}

// Form models
model FormTemplate {
  id            String                @id @default(uuid()) @db.Uuid
  name          String
  description   String?
  version       Int                   @default(1)
  status        FormTemplateStatus    @default(DRAFT)
  documentTypes String[]              @map("document_types")
  requiredFields String[]             @map("required_fields")
  optionalFields String[]             @map("optional_fields")
  fieldMappings Json                  @map("field_mappings")
  templateData  Json                  @map("template_data")
  createdBy     String                @map("created_by") @db.Uuid
  createdAt     DateTime              @default(now()) @map("created_at") @db.Timestamptz
  updatedAt     DateTime              @default(now()) @map("updated_at") @db.Timestamptz

  // Relations
  creator       User                  @relation(fields: [createdBy], references: [id])
  submissions   FormSubmission[]

  @@map("form_templates")
}

enum FormTemplateStatus {
  DRAFT
  ACTIVE
  DEPRECATED
  ARCHIVED
}

model FormSubmission {
  id            String                @id @default(uuid()) @db.Uuid
  templateId    String                @map("template_id") @db.Uuid
  templateVersion Int                 @map("template_version")
  caseId        String                @map("case_id") @db.Uuid
  userId        String                @map("user_id") @db.Uuid
  formData      Json                  @map("form_data")
  filePath      String                @map("file_path")
  fileName      String                @map("file_name")
  fileSize      Int                   @map("file_size")
  status        String                @default("generated")
  submittedAt   DateTime?             @map("submitted_at") @db.Timestamptz
  createdAt     DateTime              @default(now()) @map("created_at") @db.Timestamptz
  updatedAt     DateTime              @default(now()) @map("updated_at") @db.Timestamptz

  // Relations
  template      FormTemplate          @relation(fields: [templateId], references: [id])
  case          Case                  @relation(fields: [caseId], references: [id])
  user          User                  @relation(fields: [userId], references: [id])
  signatures    FormSignature[]

  @@map("form_submissions")
}

model FormSignature {
  id            String                @id @default(uuid()) @db.Uuid
  submissionId  String                @map("submission_id") @db.Uuid
  userId        String                @map("user_id") @db.Uuid
  signatureData String                @map("signature_data")
  signatureType String                @default("drawn") @map("signature_type")
  ipAddress     String?               @map("ip_address")
  userAgent     String?               @map("user_agent")
  createdAt     DateTime              @default(now()) @map("created_at") @db.Timestamptz

  // Relations
  submission    FormSubmission        @relation(fields: [submissionId], references: [id])
  user          User                  @relation(fields: [userId], references: [id])

  @@map("form_signatures")
}

// Security models
model SecurityAlert {
  id            String                @id @default(uuid()) @db.Uuid
  type          String
  severity      String
  status        String                @default("open")
  title         String
  description   String
  metadata      Json?
  userId        String?               @map("user_id") @db.Uuid
  createdAt     DateTime              @default(now()) @map("created_at") @db.Timestamptz
  updatedAt     DateTime              @default(now()) @map("updated_at") @db.Timestamptz
  resolvedAt    DateTime?             @map("resolved_at") @db.Timestamptz
  resolvedBy    String?               @map("resolved_by") @db.Uuid

  // Relations
  user          User?                 @relation(fields: [userId], references: [id])

  @@map("security_alerts")
}

model DataSubjectRequest {
  id            String                @id @default(uuid()) @db.Uuid
  userId        String                @map("user_id") @db.Uuid
  requestType   String                @map("request_type")
  status        String                @default("pending")
  requestData   Json?                 @map("request_data")
  notes         String?
  createdAt     DateTime              @default(now()) @map("created_at") @db.Timestamptz
  updatedAt     DateTime              @default(now()) @map("updated_at") @db.Timestamptz
  completedAt   DateTime?             @map("completed_at") @db.Timestamptz

  // Relations
  user          User                  @relation(fields: [userId], references: [id])

  @@map("data_subject_requests")
}

model PermissionGroup {
  id            String                @id @default(uuid()) @db.Uuid
  name          String
  description   String?
  permissions   String[]
  createdAt     DateTime              @default(now()) @map("created_at") @db.Timestamptz
  updatedAt     DateTime              @default(now()) @map("updated_at") @db.Timestamptz

  // Relations
  users         UserPermissionGroup[]

  @@map("permission_groups")
}

model UserPermissionGroup {
  userId        String                @map("user_id") @db.Uuid
  groupId       String                @map("group_id") @db.Uuid
  assignedAt    DateTime              @default(now()) @map("assigned_at") @db.Timestamptz

  // Relations
  user          User                  @relation(fields: [userId], references: [id])
  group         PermissionGroup       @relation(fields: [groupId], references: [id])

  @@id([userId, groupId])
  @@map("user_permission_groups")
}

model AccessReview {
  id            String                @id @default(uuid()) @db.Uuid
  userId        String                @map("user_id") @db.Uuid
  reviewerId    String                @map("reviewer_id") @db.Uuid
  status        String                @default("pending")
  notes         String?
  createdAt     DateTime              @default(now()) @map("created_at") @db.Timestamptz
  updatedAt     DateTime              @default(now()) @map("updated_at") @db.Timestamptz
  completedAt   DateTime?             @map("completed_at") @db.Timestamptz

  // Relations
  user          User                  @relation(fields: [userId], references: [id])

  @@map("access_reviews")
}
